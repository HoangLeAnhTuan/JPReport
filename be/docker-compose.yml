version: "3.8"

services:
    # PostgreSQL Database
    postgres:
        image: postgres:15-alpine
        container_name: jpreport-postgres
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-jpreport_db}
            POSTGRES_USER: ${POSTGRES_USER:-jpreport}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123456}
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - jpreport-network
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U jpreport -d jpreport_db"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Redis Cache
    redis:
        image: redis:7-alpine
        container_name: jpreport-redis
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        networks:
            - jpreport-network
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Spring Boot Application
    app:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: jpreport-app
        environment:
            SPRING_PROFILES_ACTIVE: docker
            DB_HOST: postgres
            DB_PORT: 5432
            DB_NAME: ${POSTGRES_DB:-jpreport_db}
            DB_USER: ${POSTGRES_USER:-jpreport}
            DB_PASSWORD: ${POSTGRES_PASSWORD:-123456}
            REDIS_HOST: redis
            REDIS_PORT: 6379
        ports:
            - "8080:8080"
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - jpreport-network
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD",
                    "curl",
                    "-f",
                    "http://localhost:8080/api/v1/actuator/health",
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s

volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local

networks:
    jpreport-network:
        driver: bridge
